// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
import {main} from '../models';

export function AbortRollout(arg1:main.KubernetesConfig,arg2:string):Promise<void>;

export function CheckGandiToken():Promise<main.CertificateOperation>;

export function CheckTFEDeprecatedVersions(arg1:main.TFEConfig,arg2:string,arg3:string,arg4:boolean):Promise<Record<string, any>>;

export function CreateJWTClient(arg1:main.JWTClientConfig):Promise<void>;

export function CreateJWTServer(arg1:main.JWTServerConfig):Promise<void>;

export function CreateSecret(arg1:main.SecretConfig,arg2:string,arg3:string,arg4:string,arg5:string,arg6:Record<string, string>):Promise<void>;

export function DeleteEnvironmentProfile(arg1:string):Promise<void>;

export function DeleteSecret(arg1:main.SecretConfig,arg2:string,arg3:number):Promise<void>;

export function DescribeCertificateSecret(arg1:string,arg2:number,arg3:number):Promise<main.CertificateOperation>;

export function DiscardTFERuns(arg1:main.TFEConfig,arg2:number,arg3:boolean,arg4:boolean,arg5:boolean):Promise<void>;

export function ExecuteTFEPlan(arg1:main.TFEConfig,arg2:main.TFEPlanExecution):Promise<Array<main.TFEPlanResult>>;

export function GetAWSProfiles():Promise<Array<string>>;

export function GetAppVersion():Promise<Record<string, string>>;

export function GetArgoAppDetail(arg1:main.ArgoConfig,arg2:string):Promise<main.ArgoAppDetail>;

export function GetArgoApps(arg1:main.ArgoConfig):Promise<Array<main.ArgoApp>>;

export function GetArgoCDServerFromProfile():Promise<string>;

export function GetCertificateConfig():Promise<Array<main.Certificate>>;

export function GetCurrentAWSProfile():Promise<string>;

export function GetEnvironmentProfiles():Promise<Array<main.EnvironmentProfile>>;

export function GetEnvironmentVariables():Promise<Record<string, string>>;

export function GetGandiToken():Promise<string>;

export function GetKubeconfig():Promise<string>;

export function GetRolloutStatus(arg1:main.KubernetesConfig,arg2:string):Promise<main.RolloutStatus>;

export function GetRollouts(arg1:main.KubernetesConfig):Promise<Array<main.RolloutListItem>>;

export function GetSecretConfigEnvironments(arg1:string):Promise<Array<string>>;

export function GetSecretConfigPaths(arg1:string,arg2:string):Promise<Array<string>>;

export function GetSecretConfigPlatforms():Promise<Array<string>>;

export function GetSecretData(arg1:main.SecretConfig,arg2:string,arg3:number):Promise<main.SecretData>;

export function GetSecrets(arg1:main.SecretConfig,arg2:string):Promise<Array<main.SecretListItem>>;

export function GetShellEnvironment():Promise<Record<string, string>>;

export function GetShellPATH():Promise<string>;

export function GetTFEConfig():Promise<main.TFEConfig>;

export function GetTFERunLogs(arg1:main.TFEConfig,arg2:string):Promise<string>;

export function GetTFERuns(arg1:main.TFEConfig,arg2:string):Promise<Array<main.TFERun>>;

export function GetTFEVariableSetDetails(arg1:main.TFEConfig,arg2:string):Promise<main.TFEVariableSetDetails>;

export function GetTFEVariableSetVariables(arg1:main.TFEConfig,arg2:string):Promise<Array<main.TFEVariable>>;

export function GetTFEVariableSets(arg1:main.TFEConfig):Promise<Array<main.TFEVariableSet>>;

export function GetTFEVersions(arg1:main.TFEConfig):Promise<Array<main.TFEVersionInfo>>;

export function GetTFEWorkspaceDetails(arg1:main.TFEConfig,arg2:string):Promise<main.TFEWorkspace>;

export function GetTFEWorkspaceVariables(arg1:main.TFEConfig,arg2:string,arg3:boolean):Promise<Array<main.TFEVariable>>;

export function GetTFEWorkspaces(arg1:main.TFEConfig):Promise<Array<main.TFEWorkspace>>;

export function GetTFEWorkspacesByTag(arg1:main.TFEConfig,arg2:string,arg3:boolean):Promise<Array<main.TFEWorkspace>>;

export function Greet(arg1:string):Promise<string>;

export function ImportShellEnvironment():Promise<void>;

export function IsGandiTokenSet():Promise<boolean>;

export function IsWindowMaximized():Promise<boolean>;

export function ListCertificates():Promise<Array<string>>;

export function LoadEnvironmentProfile(arg1:string):Promise<void>;

export function LoadSecretConfig():Promise<main.YakSecretConfig>;

export function LockTFEWorkspace(arg1:main.TFEConfig,arg2:Array<string>,arg3:boolean):Promise<void>;

export function LoginToArgoCD(arg1:main.ArgoConfig):Promise<void>;

export function MaximizeWindow():Promise<void>;

export function PauseRollout(arg1:main.KubernetesConfig,arg2:string):Promise<void>;

export function PromoteRollout(arg1:main.KubernetesConfig,arg2:string,arg3:boolean):Promise<void>;

export function RefreshArgoApp(arg1:main.ArgoConfig,arg2:string):Promise<void>;

export function RefreshCertificateSecret(arg1:string,arg2:string):Promise<main.CertificateOperation>;

export function RenewCertificate(arg1:string,arg2:string):Promise<main.CertificateOperation>;

export function RestartRollout(arg1:main.KubernetesConfig,arg2:string):Promise<void>;

export function SaveEnvironmentProfile(arg1:string):Promise<void>;

export function SendCertificateNotification(arg1:string,arg2:string,arg3:string):Promise<main.CertificateOperation>;

export function SetAWSProfile(arg1:string):Promise<void>;

export function SetGandiToken(arg1:string):Promise<void>;

export function SetKubeconfig(arg1:string):Promise<void>;

export function SetPATH(arg1:string):Promise<void>;

export function SetRolloutImage(arg1:main.KubernetesConfig,arg2:string,arg3:string,arg4:string):Promise<void>;

export function SetTFEConfig(arg1:main.TFEConfig):Promise<void>;

export function SetTFEWorkspaceVersion(arg1:main.TFEConfig,arg2:Array<string>,arg3:string):Promise<void>;

export function SetTfInfraRepositoryPath(arg1:string):Promise<void>;

export function SuspendArgoApp(arg1:main.ArgoConfig,arg2:string):Promise<void>;

export function SyncArgoApp(arg1:main.ArgoConfig,arg2:string,arg3:boolean,arg4:boolean):Promise<void>;

export function TestSimpleArray():Promise<Array<string>>;

export function UnlockTFEWorkspace(arg1:main.TFEConfig,arg2:Array<string>,arg3:boolean):Promise<void>;

export function UnmaximizeWindow():Promise<void>;

export function UnsuspendArgoApp(arg1:main.ArgoConfig,arg2:string):Promise<void>;

export function UpdateSecret(arg1:main.SecretConfig,arg2:string,arg3:Record<string, string>):Promise<void>;
